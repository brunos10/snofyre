#summary Advanced Scripting Using Snofyre's Scripting Console

= Advanced Scripting Using Snofyre's Scripting Console =

In the previous post, we described the first steps for calling Snofyre's underlying services via the scripting console. Let us now look at some of the more advanced calls we can make to Snofyre's services. From here on, we wont use as many illustrations as we did before.

== Moving onto Objects ==
In the previous example, we were printing the values returned by Snofyre to the console's output. This limits us to {{{String}}}s and does not allow us to do much. Let us now see how we can return full fledged Java {{{objects}}} that represent SNOMED CT concepts using Snofyre's services. Let us adapt our previous example of looking up the {{{Fully Specified Name}}} of {{{22298006}}}...
  * Clear the scripting console and type the following into the console 
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
}}}
  * Notice how we use {{{def concept =}}} to assign the value returned by {{{terminologyDAO}}} to an object {{{concept}}}.
  * Since this {{{concept}}} object represents a SNOMED CT concept, we can use Snofyre API to retrieve all the features of this concept. 
  * Lets first print out the {{{Fully Specified Name}}} of this {{{concept}}}. To do that, clear the console and type the following:
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
println concept.getFullySpecifiedName()
}}}
[http://snofyre.googlecode.com/svn/wiki/images/terminology-dao-1.png]
  * Now run this code using the {{{Run script}}} button.
  * This should print out our familiar result of:
{{{
Myocardial Infarction (disorder)
}}}
[http://snofyre.googlecode.com/svn/wiki/images/terminology-dao-2.png]
  * Since we are now dealing with proper Snofyre objects, we can easily print out all the {{{synonyms}}} for this concept, by adding this additional line of code. Our console input should now look like:
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
println concept.getFullySpecifiedName()
println concept.getSynonyms()
}}}
  * Now run this code using the {{{Run script}}} button.
  * This should print out:
{{{
Myocardial infarction (disorder)
[Heart attack, Cardiac infarction, Myocardial infarct, ... so on...]
}}}
  * Of course, you don't have to stop at just {{{synonyms}}}, you can get all its {{{descriptions}}}, {{{relationships}}}, {{{children}}} etc.
  * You can look up all the available method calls using the Javadoc for {{{SnomedConcept}}} class.
  * When you start using Snofyre's objects you get a lot of this functionality for free. By default, most Snofyre's services return Snofyre objects.

== More Services (and objects) ==
Up until now we've only looked looked at just one of Snofyre's many services and just one of its many classes. Lets now show you some of Snofyre's other services.

=== Hierarchy Provider ===
Lets say we wanted to get all types of {{{Myocardial infarction }}} specified in SNOMED CT, we can do this off the shelf using the {{{hierarchyProvider}}} service. Lets show you how.
  * Let use reuse some of the code we previously typed out.
  * To do that, clear the console and type the following:
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
println hierarchyProvider.getChildren(concept.getConceptID())
}}}
  * Now run this code using the {{{Run script}}} button.
  * This should print out something like what is shown below:
{{{
Myocardial infarction (disorder)
[371068009, 233843008, 418044006, 57054005, ... so on...]
}}}
[http://snofyre.googlecode.com/svn/wiki/images/hierarchy-provider-1.png]
  * Notice how this only prints out the {{{concept id}}}s of the children and not entire concepts. This is a performance measure because returning entire objects is computationally expensive, especially if you select an high level concept like {{{Clinical Finding}}}. In creating Snofyre, we made the design decision to only ever return {{{concept id}}}s when using the {{{hierarchyProvider}}} service.
  * Remember the majority of Snofyre's services return Snofyre {{{object}}}s, not {{{String}}}s.
  * The {{{getChildren}}} method only returns the first level children of {{{Myocardial infarction }}}. In a lot of cases, we actually want {{{ALL}}} types of {{{Myocardial infarction }}}. 
  * To do that, clear the console and type the following:
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
println hierarchyProvider.getDescendants(concept.getConceptID())
}}}
  * Now run this code using the {{{Run script}}} button.
  * This should print out something like what is shown below:
{{{
Myocardial infarction (disorder)
[371068009, 233843008, 418044006, 57054005, ... A LOT MORE...]
}}}
[http://snofyre.googlecode.com/svn/wiki/images/hierarchy-provider-2.png]
  * Notice again how only {{{concept id}}}s are returned.

=== Normal Form Generator ===
If you try creating {{{post-coordinated}}} expressions using SNOMED CT, then you need to convert the {{{post-coordinated}}} expression into its {{{normal form}}} before you can compare it with another {{{post-coordinated}}} expression. The rules for generating the {{{normal form}}} are somewhat complex and use recursive {{{subsumption}}} testing. You can find more information on generating {{{normal forms}}} in the SNOMED CT Technical Implementation Guide. Snofyre provides this ability out of the box in the {{{normalFormGenerator}}} service. Let us see how to generate the normal form of {{{Myocardial infarction }}}.
  * To do this, clear the console and type the following:
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
println normalFormGenerator.getLongNormalFormExpression(concept)
}}}
[http://snofyre.googlecode.com/svn/wiki/images/normal-form-generator-1.png]
  * Now run this code using the {{{Run script}}} button.
  * This should print out a longish serialisation of an Snofyre {{{NormalFormExpression}}} object that runs off the bottom of the screen.
  * Don't worry about how long this {{{NormalFormExpression}}} object looks. It just Snofyre's internal object representation.
  * In fact, there are a few different ways of making the {{{NormalFormExpression}}} object more human readable. We'll cover one of them in the next section.

=== Compositional Grammar Form Generator ===
We often need a terse way of expressing {{{normal form}}}s, in a way that makes them machine readable (+ parsable) and also slightly more human friendly. One way to do this is to express a {{{normal form}}} using {{{Compositional Grammar}}}. Once again, we can do this out of the box using Snofyre's {{{cgfConverter}}} service.
  * To do this, clear the console and type the following:
{{{
def concept = terminologyDAO.getTerminologyConcept("22298006")
def nfe = normalFormGenerator.getLongNormalFormExpression(concept)
println cgfConverter.getCompositionalForm(nfe)
}}}
  * Now run this code using the {{{Run script}}} button.
  * This should print out something like what is shown below:
{{{
64572001:{116676008=55641003,
363698007=74281007}
}}}
[http://snofyre.googlecode.com/svn/wiki/images/compositional-grammar-form-generator-1.png]
  * Notice how our previously longishhh {{{NormalFormExpression}}} object  has been represented in a terse form using {{{concept id}}}s and some other symbols. There is a BNF for how the {{{compositional grammar form}}} can be written. Once again, refer to the SNOMED CT Technical Implementation Guide for information.
  * Arguably we could have added the {{{descriptions}}} against each concept identifier to make a lot more human readable. But for the moment Snofyre does not provide this out of the box.
  * If you are interested in this feature or would like to help us implement it, please contact us at http://groups.google.com/group/snofyre-dev

=== Snofyre Services Lookup Table ===
Here is a lookup table of the most commonly used Snofyre services.

|| *Service Name* || *Service Description* ||
|| terminologyDAO || Access to SNOMED CT content ||
|| normalFormGenerator || Generates Normal Forms for Concepts/Expressions ||
|| hierarchyProvider || Provides hierarchy look up for SNOMED CT concepts ||
|| expressionComparator || Service that compares any two given concepts/expressions for equivalence or {{{subsumption}}} ||
|| cgfConverter || Converts a concept/expression into its compositional grammar form ||
|| randomSubtypeGenerator || Returns a random subtype for a given concept or expression ||
|| expressionRender || Returns a human readable rendering for Concepts/Expressions ||
|| queryExpressionFactory || Factory service for creating {{{query}}} objects ||
|| mrcmService || Service that returns sanctioned attributes and values for a given concept ||

If you are looking for even faster ways of using Snofyre's services, then head over to [joiningServices joining services].